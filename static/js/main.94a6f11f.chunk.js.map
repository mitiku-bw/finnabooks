{"version":3,"sources":["finnabooks.png","Navbar.js","context.js","Spinner.js","Book.js","Books.js","Iindex.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Navbar","react_default","a","createElement","className","href","src","logo","alt","type","id","placeholder","name","aria-label","Context","React","createContext","Provider","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","book_list","heading","inherits","createClass","key","value","_this2","axios","get","then","res","setState","data","records","console","log","catch","err","props","children","Component","Consumer","Spinner","role","Book","book","images","title","primaryAuthors","year","react_router_dom","to","Books","undefined","Fragment","map","item","src_Book","Iindex","src_Books","App","context_Provider","basename","src_Navbar","react_router","exact","path","component","Index","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.94a6f11f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/finnabooks.861dabee.png\";","import React from \"react\";\nimport logo from './finnabooks.png'\n\nconst Navbar = () => {\n  return (\n    <div className=\"container\">\n      <nav className=\"row navbar navbar-light bg-light\">\n        <a className=\"navbar-brand\" href=\"/\">\n          <img src={logo} alt=\"logo\" />\n          <span className=\"bluish\">Finna</span>Books\n        </a>\n        <form className=\"form-inline\">\n          <input\n            className=\"form-control input-lg\"\n            type=\"text\"\n            id=\"quick-search\"\n            placeholder=\"Search for books by keyword / title / author / ISBN\"\n            name=\"quik-search\"\n            aria-label=\"Search\"\n          />\n          <button className=\"btn btn-primary\" type=\"submit\">\n            <i className=\"fas fa-search\" />\n          </button>\n          <button className=\"btn btn-default\" type=\"submit\">\n            Advanced Search\n          </button>\n        </form>\n      </nav>\n    </div>\n  );\n};\n\nexport default Navbar;\n","import React, { Component } from 'react'\nimport axios from 'axios'\n\nconst Context = React.createContext();\n\nexport class Provider extends Component {\n    state = {\n        book_list: [],\n        heading: 'Books from Finna API'\n    }\n\n    componentDidMount(){\n        axios.get(`https://api.finna.fi/v1/search?lookfor=&filter[]=format:0/Book/&field[]=id&field[]=title&field[]=primaryAuthors&field[]=images&field[]=publishers&field[]=rating&field[]=year&limit=100`)\n        .then(res => {\n            this.setState({ book_list:res.data.records })\n            console.log(res.data.records)\n        })\n        .catch(res => console.log(res.err))\n    }\n\n    render(){\n        return(\n            <Context.Provider value={this.state}>\n                {this.props.children}\n            </Context.Provider>\n        )\n    }\n}\n\nexport const Consumer = Context.Consumer","import React from 'react'\n\nexport default function Spinner() {\n    return (\n        <div className=\"d-flex justify-content-center\">\n            <div className=\"spinner-grow text-primary\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n            </div>\n        </div>\n    )\n}\n","import React from 'react'\nimport {Link} from 'react-router-dom'\n\nconst Book = (props) => {\n    const { book } = props\n    const preimage_url = 'https://api.finna.fi'\n    return (\n        <div className=\"col-md-4\">\n            <div className=\"card mb-4 shadow-sm\">\n                <img src={preimage_url+book.images} className=\"card-img-top\" alt={book.title} />\n                <div className=\"card-body\">\n                    <h5 className=\"card-title\">{book.primaryAuthors}</h5>\n                    <strong className=\"card-text\">{book.title}</strong>\n                    <p className=\"card-text\">{book.year}</p>\n                    <Link to={`books/book/${book.id}`} className=\"card-link\">\n                        <i className=\"fas fa-chevron-right\">Details</i>\n                    </Link>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Book","import React, { Component } from 'react'\nimport { Consumer } from './context'\nimport Spinner from './Spinner'\nimport Book from './Book'\n\nclass Books extends Component {\n    render() {\n        return (\n        <Consumer>\n            {value =>{\n                const { book_list, heading } = value\n                if(book_list === undefined || book_list.length === 0){\n                    return <Spinner />\n                }else{\n                    return (\n                        <React.Fragment>\n                            <h3 className=\"text-center mb-4\">{heading}</h3>\n                            <div className=\"row\">\n                                {book_list.map(item => (\n                                    <Book key={item.id} book={item}/>\n                                ))}\n                            </div>\n                        </React.Fragment>\n                    )\n                }\n\n            }}\n        </Consumer>\n        )\n    }\n}\n\nexport default Books","import React from 'react'\nimport Books from './Books'\n\nconst Iindex = () => {\n    return(\n        <div>\n            <React.Fragment>\n                <Books />\n            </React.Fragment>\n        </div>\n    )\n}\n\nexport default Iindex\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Navbar from './Navbar';\nimport Iindex from './Iindex';\nimport { Provider } from './context'\nimport './App.css';\n\nfunction App() {\n  return (\n    <Provider>\n      <Router basename=\"/\">\n        <React.Fragment>\n          <Navbar />\n          <div className=\"container\">\n            <Switch>\n              <Route exact path=\"/\" component={Iindex} />\n            </Switch>\n          </div>\n        </React.Fragment>\n      </Router>\n    </Provider>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}